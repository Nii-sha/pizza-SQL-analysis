select * from orders;
select * from pizzas;
select * from order_details;
select * from pizza_type;


-- Q1. Retrieve the total number of orders placed.

SELECT COUNT(order_id) AS total_orders
FROM orders;

-- Q2. Calculate the total revenue generated from pizza sales.

SELECT round(sum(od.quantity*pi.price),2) AS total_revenue
FROM order_details od
JOIN pizzas pi 
ON od.pizza_id= pi.pizza_id;

-- Q3. Identify the highest-priced pizza.

SELECT pizzas.pizza_type_id, pt.name , price
FROM pizzas, pizza_type pt 
ORDER BY price DESC
LIMIT 5 ;

-- Q4.  Identify the most common pizza size ordered.

SELECT COUNT(size), pizza_type_id
FROM pizzas
GROUP BY  pizza_type_id;


-- Q5. Identify the most comon pizza size ordered 

SELECT p.size, COUNT(od.order_details_id) AS order_count
FROM pizzas p 
JOIN order_details od
ON p.pizza_id=od.pizza_id
GROUP BY  p.size
order by 2 DESC;

-- Intermediate:
-- Q1. Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT pt.category, SUM(od.quantity) as quantities
FROM pizza_type pt
JOIN pizzas ON pt.pizza_type_id = pizzas. pizza_type_id
JOIN order_details od ON od.pizza_id = pizzas. pizza_id 
GROUP BY 1 ;

-- Q2. Determine the distribution of orders by hour of the day.

SELECT HOUR(order_time) AS ordertime , COUNT(order_id) AS order_count
FROM orders
GROUP BY HOUR(order_time);


-- Q3. Join relevant tables to find the category-wise distribution of pizzas.

SELECT  COUNT(name)  AS total , category
FROM pizza_type pt
GROUP BY pt.category;

-- Q4. Group the orders by date and calculate the average number of pizzas ordered per day.

select round(avg(total), 2)  as avg_perday 
 from quantity_ordered 

(SELECT  o.order_date, SUM(od.quantity) total
FROM orders o
JOIN order_details od
ON od.order_id = o.order_id
GROUP BY o.order_date
AS quantity_ordered)
;


-- Q5. Determine the top 3 most ordered pizza types based on revenue.

SELECT p.pizza_id, round(sum(p.price*od.quantity),2) as rev
FROM pizzas p
JOIN order_details od
ON  od.pizza_id = p.pizza_id
GROUP BY p.pizza_id
ORDER BY rev DESC
LIMIT 3
;



-- Advanced:
-- Q1. Calculate the percentage contribution of each pizza type to total revenue.

select pizza_types.category,
round (sum(order_details.quantity*pizzas.price) / (SELECT
ROUND(SUM(order_details-quantity * pizzas.price),2) AS total_sales

FROM order_details
JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id) *100,2) as revenue
from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.category order by revenue ;

-- Q2. Analyze the cumulative revenue generated over time.

SELECT order_date, sum(revenue) over(order by order_date) as cumm_rev
from
	(select orders.order_date,
    sum(od.quantity*p.price) as revenue
    from order_details od JOIN pizzas p
    on od.pizza_id = p.pizza_id
    JOIN orders o
    ON od.order_id = o.order_id
    group by o.orders_date) AS sales;


-- Q3. Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select category, name, revenue , rank() over(partition by category order by rev) as rn
from 
(select pt.name,
	pt.category, 
	sum(od.quantity*p.price) as revenue ,
    from order_details od  join pizzas p
    on od.pizza_id = p.pizza_id
    join pizza_type pt 
    on p.pizza_type_id =  pt.pizza_type_id
group by pt.category, pt.name
order by category) as a
